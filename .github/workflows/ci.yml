name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  deployments: write
  pull-requests: read

env:
  HUSKY: 0
  NODE_ENV: production

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run ESLint
        run: bun run lint

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run unit tests with coverage
        env:
          NODE_ENV: test
        run: |
          cd apps/web && bun run test:ci
          cd ../convex && bun run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            apps/web/coverage
            apps/convex/coverage

      - name: Check coverage thresholds
        env:
          NODE_ENV: test
        run: |
          echo "Checking coverage thresholds..."
          cd apps/web && bun run test:coverage || exit 1
          cd ../convex && bun run test:coverage || exit 1

      - name: Run type checks
        run: bun run typecheck

  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Check if E2E tests exist
        id: check-e2e
        run: |
          if [ -d "tests" ] && [ "$(ls -A tests 2>/dev/null)" ]; then
            echo "e2e_exists=true" >> $GITHUB_OUTPUT
          else
            echo "e2e_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Playwright browsers
        if: steps.check-e2e.outputs.e2e_exists == 'true'
        run: bun run test:e2e:install

      - name: Run E2E tests
        if: steps.check-e2e.outputs.e2e_exists == 'true'
        run: bun run test:e2e

      - name: Skip E2E tests
        if: steps.check-e2e.outputs.e2e_exists == 'false'
        run: echo "No E2E tests found, skipping..."

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    env:
      NEXT_PUBLIC_CONVEX_URL: ${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build applications
        run: bun run build

      - name: Build for Cloudflare Pages
        run: |
          cd apps/web
          bun run build:pages

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: apps/web/.vercel/output/static
          retention-days: 1

  deploy:
    name: Deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: [build, test-e2e]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: apps/web/.vercel/output/static

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          directory: apps/web/.vercel/output/static
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      # Note: Required GitHub Secrets for Cloudflare Pages deployment:
      # - CLOUDFLARE_API_TOKEN: API token with Pages:Edit permission
      # - CLOUDFLARE_ACCOUNT_ID: Your Cloudflare account ID
      # - CLOUDFLARE_PROJECT_NAME: Name of your Cloudflare Pages project
