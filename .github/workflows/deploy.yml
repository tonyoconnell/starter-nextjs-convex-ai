name: Deploy Three-Service Stack to Cloudflare + Convex

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: 18
  BUN_VERSION: 1.1.0

jobs:
  test:
    name: Test & Build All Services
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install

      - name: Run TypeScript check
        run: bun run typecheck

      - name: Run linting
        run: bun run lint

      - name: Run tests
        run: bun run test

      - name: Build web application
        run: bun run build

      - name: Test worker compilation
        run: |
          cd apps/workers/log-ingestion
          bun run build

  deploy-convex:
    name: Deploy Convex Backend
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install

      - name: Deploy Convex Backend
        run: |
          cd apps/convex
          npx convex deploy --cmd="$(cat <<EOF
          import { defineSchema } from 'convex/server';
          export default defineSchema({});
          EOF
          )"
        env:
          CONVEX_DEPLOY_KEY: ${{ secrets.CONVEX_DEPLOY_KEY }}

      - name: Wait for Convex deployment
        run: sleep 30

  deploy-log-worker:
    name: Deploy Log Ingestion Worker
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install

      - name: Deploy Log Ingestion Worker
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: apps/workers/log-ingestion
          command: deploy --env production
          secrets: |
            UPSTASH_REDIS_REST_URL
            UPSTASH_REDIS_REST_TOKEN
            CONVEX_URL
        env:
          UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL }}
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
          CONVEX_URL: ${{ secrets.CONVEX_URL }}

  deploy-frontend:
    name: Deploy Next.js Frontend to Cloudflare Pages
    needs: [deploy-convex, deploy-log-worker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install

      - name: Build for Cloudflare Pages
        run: bun run build:pages
        env:
          CI: true
          NEXT_PUBLIC_CONVEX_URL: ${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          NEXT_PUBLIC_BETTER_AUTH_URL: ${{ secrets.NEXT_PUBLIC_BETTER_AUTH_URL }}
          NEXT_PUBLIC_LOG_WORKER_URL: https://log-ingestion-worker.tonyoconnell.workers.dev

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy apps/web/dist --project-name=starter-nextjs-convex-ai

  health-check:
    name: End-to-End Health Check
    needs: [deploy-convex, deploy-log-worker, deploy-frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Wait for deployment propagation
        run: sleep 60

      - name: Check Convex Backend Health
        run: |
          # Test Convex API connectivity
          curl -f -X POST https://api.convex.dev/v1/query \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.CONVEX_API_KEY }}" \
            -d '{"path":"health:check","args":{}}' || echo "Convex health check endpoint not implemented"

      - name: Check Log Ingestion Worker
        run: |
          curl -f https://log-ingestion-worker.tonyoconnell.workers.dev/health || exit 1
          echo "✅ Log Worker healthy"

      - name: Check Frontend Pages Deployment
        run: |
          curl -f https://starter-nextjs-convex-ai.pages.dev/ || exit 1
          echo "✅ Frontend healthy"

      - name: Test Integration Flow
        run: |
          # Test that frontend can reach backend services
          curl -f https://starter-nextjs-convex-ai.pages.dev/api/health || echo "⚠️ Frontend health endpoint not implemented"

      - name: Notify deployment success
        if: success()
        run: |
          echo "🎉 Three-service deployment successful!"
          echo "📊 Convex Backend: ${{ secrets.CONVEX_URL }}"
          echo "🔄 Log Worker: https://log-ingestion-worker.tonyoconnell.workers.dev"
          echo "🌐 Frontend: https://starter-nextjs-convex-ai.pages.dev"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Multi-service deployment health check failed!"
          echo "Check individual service status and logs"
          exit 1

  observability:
    name: Configure Observability
    needs: [deploy-convex, deploy-log-worker, deploy-frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Setup monitoring dashboards
        run: |
          echo "📊 Configuring monitoring for three-service stack:"
          echo "- Convex: Real-time database monitoring"
          echo "- Worker: Cloudflare Workers Logs and Analytics"
          echo "- Pages: Cloudflare Web Analytics"

      - name: Log deployment metrics
        run: |
          echo "deployment_time=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> deployment_metrics.log
          echo "services_deployed=3" >> deployment_metrics.log
          echo "convex_backend=deployed" >> deployment_metrics.log
          echo "log_worker=deployed" >> deployment_metrics.log
          echo "frontend_pages=deployed" >> deployment_metrics.log